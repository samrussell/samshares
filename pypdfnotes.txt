I want to extract the text in a form that I can manupulate
Apparently pdf.getPage(i) gets me a PageObject
we can use this to extract more stuff somehow...

PageObject subclasses DictionaryObject
DictionaryObject.arr is a dictionary with stuff in it
tempted to just JSONprint it...

Let's look through PageObject.extractText() and get something
useful out of it

PageObject has a getContents function that extractText() and
getTextObjects() should be using...

Contents is a ContentStream, should look at this more

Oh right it makes a ContentStream if there isn't one already, definitely check this out

-> ContentStream(content, self.pdf)

Let's just put debug prints into ContentStream :D

Creates a StringIO (lets you read/write strings like a file handle)
So we basically have a handle to a string, let's just print it :D

Here it is:

Now check ContentStream._parseContentStream to see what it does with it

Parsed out data, time to learn XMP or whatever to find how it orders this stuff

Let's look at how it renders the word "Sales" on page 50:

<TJ> <ET> <BT> /T1_7 1 <Tf> 6.5 0 0 6.5 779.6555 712.5033 <Tm> [u' ', -28, u'June ', -28, u'2007'] <TJ> <ET> <BT> /T1_7 1 <Tf> 6.5 0 0 6.5 793.9919 704.086 <Tm> NZ$M <Tj> <ET> <BT> /T1_7 1 <Tf> 8 0 0 8 333.0068 689.9937 <Tm> [u'S', -16, u'a', -9, u'l', -12, u'e', -17, u's'

Omg ballsed this up - Tj is text, Tm sets up the matrix

stream
BT % Begin text object
/F1 1 Tf % Set text font and size
64 0 0 64 7.1771 2.4414 Tm % Set text matrix
0 Tc % Set character spacing
0 Tw % Set word spacing
1.0 0.0 0.0 rg % Set nonstroking color to red
(\001) Tj % Show spade glyph
0.7478 -0.007 TD % Move text position
0.0 1.0 0.0 rg % Set nonstroking color to green
(\002) Tj % Show heart glyph
-0.7323 0.7813 TD % Move text position
0.0 0.0 1.0 rg % Set nonstroking color to blue
(\003) Tj % Show diamond glyph
0.6913 0.007 TD % Move text position
0.0 0.0 0.0 rg % Set nonstroking color to black
(\004) Tj % Show club glyph
ET % End text object
endstream

Text has to start with BT and end with ET

Try parse in samshares and not in pypdf2

Looks like operators always end up at end of line, so print differently:

Tj example
[u'2008 ANNUAL REPORT'] <Tj>

TJ example
[[u' ', -28, u'June ', -28, u'2007']] <TJ>
[[u'C', -19, u'o', -13, u's', -34, u't ', -28, u'o', -10, u'f ', -28, u'g', -16, u'o', -18, u'o', -22, u'd', -20, u's ', -28, u's', -22, u'o', -14, u'l', -16, u'd']] <TJ>


Now have a good feel of where this renders, not sure of how much space it takes up (may not need to know?)

Need some way to visualise this to sanity check, and then find ways to draw rectangles and build a spreadsheet out of this